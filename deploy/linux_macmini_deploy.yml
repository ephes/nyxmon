- hosts: macmini
  tasks:
    - name: "Include public vars"
      include_vars: vars.yml

    - name: "Include shared secret vars"
      include_vars: secrets.yml

    - name: "Include production secret vars"
      include_vars: secrets_production.yml
      
    - name: "Include host-specific vars (loaded last to override)"
      include_vars: "host_vars/macmini.yml"

    - name: Check if uv is installed
      stat:
        path: "{{ uv_path }}"
      register: uv_installed
      
    - name: Fail if uv is not installed
      fail:
        msg: "UV is not installed. Please run: cd deploy && ansible-playbook uv.yml --limit macmini"
      when: not uv_installed.stat.exists

    - name: Add the unix user with a bash shell
      user:
        name: "{{ username }}"
        shell: /usr/bin/bash  # Use bash instead of fish for simplicity

    - name: Create site directory structure
      file:
        path: "{{ site_path }}"
        state: directory
        mode: "0755"
        owner: "{{ username }}"
      become: true

    - name: Sync Django configuration to macmini
      ansible.posix.synchronize:
        src: "{{ playbook_dir }}/../src/django/"
        dest: "{{ site_path }}/"
        rsync_opts:
          - "--exclude=__pycache__"
          - "--exclude=*.pyc"
          - "--exclude=db.sqlite3"  # Don't overwrite the database
      become: true
      become_user: "{{ username }}"

    - name: Create pyproject.toml
      template:
        src: templates/pyproject.toml.j2
        dest: "{{ site_path }}/pyproject.toml"
        mode: "0644"
        owner: "{{ username }}"

    - name: Create .env file
      template:
        src: templates/env.template.j2
        dest: "{{ site_path }}/.env"
        mode: "0600"
        owner: "{{ username }}"

    - name: Create virtualenv for python
      shell: "{{uv_path}} venv"
      args:
        chdir: "{{ site_path }}"
      become: true
      become_user: "{{ username }}"

    - name: Check if venv symlink already exists
      stat:
        path: "{{ site_path }}/venv"
      register: venv_link
      become: true
      become_user: "{{ username }}"

    - name: Link .venv to venv
      shell: "ln -s .venv venv"
      args:
        chdir: "{{ site_path }}"
      become: true
      become_user: "{{ username }}"
      when: not venv_link.stat.exists

    - name: Install dependencies with uv sync
      shell: "{{ uv_path }} sync"
      args:
        chdir: "{{ site_path }}"
      become: true
      become_user: "{{ username }}"

    - name: Create directory django cache
      file:
        path: "{{ django_cache_location }}"
        state: directory
        owner: "{{ username }}"

    - name: Run django migrations
      community.general.django_manage:
        command: migrate
        project_path: "{{ site_path }}"
        virtualenv: "{{ site_path }}/venv"
      become: true
      become_user: "{{ username }}"
      environment:
        DJANGO_SETTINGS_MODULE: "{{ django_settings_module }}"

    - name: Run django collectstatic
      community.general.django_manage:
        command: collectstatic
        project_path: "{{ site_path }}"
        virtualenv: "{{ site_path }}/venv"
      become: true
      become_user: "{{ username }}"
      environment:
        DJANGO_SETTINGS_MODULE: "{{ django_settings_module }}"

    - name: Create systemd service unit file for web server
      template:
        src: templates/systemd.service.j2
        dest: "{{ systemd_unit_path }}"

    - name: Create systemd service unit file for monitoring agent
      template:
        src: templates/monitor.service.j2
        dest: "/etc/systemd/system/{{ username }}_monitor.service"

    - name: Create directory for traefik config
      file:
        path: "{{ traefik_config_dir }}"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Create traefik service config
      template:
        src: templates/traefik.template.j2
        dest: "{{ traefik_config_path }}"
        mode: '0644'
        owner: root
        group: root

    - name: Make sure monitoring agent is running first
      systemd:
        state: restarted
        name: "{{ username }}_monitor"
        daemon_reload: yes
        
    - name: Make sure granian service is running
      systemd:
        state: restarted
        name: "{{ username }}"
        daemon_reload: yes